#include <stdio.h>
#include <stdlib.h>

#define NRA 600                 /* number of rows in matrix A */
#define NCA 600                /* number of columns in matrix A */
#define NCB 600                  /* number of columns in matrix B */

float slow_invsqrt(float num)
{
    return 1.0/sqrt(num);
}

int main (int argc, char *argv[]) 
{
    int tid, nthreads, i, j, k, chunk;
    float  a[NRA][NCA],           /* matrix A to be multiplied */
            b[NCA][NCB],           /* matrix B to be multiplied */
            c[NRA][NCB];           /* result matrix C */

        /*** Initialize matrices ***/

        for (i=0; i<NRA; i++)
            for (j=0; j<NCA; j++)
                a[i][j]= i*j;

        for (i=0; i<NCA; i++)
            for (j=0; j<NCB; j++)
                b[i][j]= i*j;

        for (i=0; i<NRA; i++)
            for (j=0; j<NCB; j++)
                c[i][j]= 0;

        /*** Do matrix multiply sharing iterations on outer loop ***/
        /*** Display who does which iterations for demonstration purposes ***/
        for (i=0; i<NRA; i++)    
        {
            //printf("Thread=%d did row=%d\n",tid,i);
            for(j=0; j<NCB; j++)       
                for (k=0; k<NCA; k++)
                {
                    float temp = a[i][k] * b[k][j];
                    int l;
                    // Repeated inverse sqroot of product
                    for(l=0;l<10;l++) //FIXME: 10 = magic number!
                    {
                        c[i][j] += slow_invsqrt(temp);                
                    }
                }
        }
    
    /*** Print results ***/
    /*printf("******************************************************\n");
      printf("Result Matrix:\n");
      for (i=0; i<NRA; i++)
      {
      for (j=0; j<NCB; j++) 
      printf("%6.2f   ", c[i][j]);
      printf("\n"); 
      }
      printf("******************************************************\n");*/
    printf ("Computation time  = %.16g\n", end - start);

    return 0;
}
